// DS18B20Events - Version: Latest

// DS18B20 - Version: Latest


// SimpleDHT - Version: Latest


// DHT sensor library for ESPx - Version: Latest

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/37045112-260b-4672-a83e-2d23a1992818

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float light;
  float soilMoisture0;
  float soilMoisture1;
  float soilMoisture2;
  float soilMoisture3;
  CloudTemperatureSensor relitiveTemp;
  CloudTemperatureSensor soilTempF;
  CloudTemperature temp;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
//Load librarys
#include <DS18B20.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include "thingProperties.h";

//Define Global Vars
#define DHTTYPE DHT11
#define DHTPIN 1
#define LEDConfirmWifi 4
#define ActivityLED 5

#define DS18B20_PIN 2

//Set DHT and DS18B20 pins and configs
DHT dht(DHTPIN, DHTTYPE);
DS18B20 ds(2);


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  //initialize dht
  dht.begin();
  // Initialize the DS18B20 sensor
  //ds.begin();
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  //Set Pin Modes
  pinMode(LEDConfirmWifi, OUTPUT);
  pinMode(ActivityLED, OUTPUT);
  pinMode(DS18B20_PIN, INPUT);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();

  //turn on activity indicator LED
  digitalWrite(ActivityLED, HIGH);

  //Check if connected
  //if connected turn on connectivity indicator LED
  //otherwise turn off connectivity indicator LED
  if (WiFi.status() == WL_CONNECTED)
  {
    digitalWrite(LEDConfirmWifi, HIGH);
  }
  else
  {
    digitalWrite(LEDConfirmWifi, LOW);
  }

  //Get Soil Temp data
  while (ds.selectNext()) {
    soilTempF = ds.getTempF();
  }

  //Get Light level data
  light = analogRead(A5);

  //Get Soil Data
  soilMoisture0 = SoilSaturationP(analogRead(A0));
  soilMoisture1 = SoilSaturationP(analogRead(A1));
  soilMoisture2 = SoilSaturationP(analogRead(A2));
  soilMoisture3 = SoilSaturationP(analogRead(A3));

  //if (soilMoisture0 < 40)
  //  {
  //    onPump0Change();
  //  }
  //  if (soilMoisture1 < 40)
  //  {
  //    onPump1Change();
  //  }
  //  if (soilMoisture2 < 40)
  //  {
  //    onPump2Change();
  //  }
  //  if (soilMoisture3 < 40)
  //  {
  //    onPump3Change();
  //  }

  //Get Air temp and humidity
  humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  // Check if any reads failed and exit early (to try again).
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    //return;
  }

  //Calculate Temp
  temp = (temperature * 9 / 5) + 32;
  float t = temp;
  float h = humidity;
  relitiveTemp = dht.computeHeatIndex(t, h, true);

  //Output to Serial for troubleshooting
  Serial.print("Soil Temp: ");
  Serial.print(soilTempF);
  Serial.println(" %\t");
  Serial.print("Plant Moisture 0: ");
  Serial.print(soilMoisture0);
  Serial.println(" %\t");
  Serial.print("Plant Moisture 1: ");
  Serial.print(soilMoisture1);
  Serial.println(" %\t");
  Serial.print("Plant Moisture 2: ");
  Serial.print(soilMoisture2);
  Serial.println(" %\t");
  Serial.print("Plant Moisture 3: ");
  Serial.print(soilMoisture3);
  Serial.println(" %\t");
  Serial.print("Light Level: ");
  Serial.print(light);
  Serial.println(" \t");
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println(" %\t");
  Serial.print("Temperature: ");
  Serial.print(temp);
  Serial.print(" *F");
  Serial.println(" %\t");
  Serial.print("Heat Index: ");
  Serial.print(relitiveTemp);
  Serial.println(" *F");
  Serial.println("*******************");
  digitalWrite(ActivityLED, LOW);

  //Delay in place to allow for predictable cadence of data delivery
  delay(10000);
}



/*
  Since Temp is READ_WRITE variable, onTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempChange()  {
  // Add your code here to act upon Temp change
}


/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}

/*
  Since Light is READ_WRITE variable, onLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLightChange()  {
  // Add your code here to act upon Light change
}

float SoilSaturationP(int SensorReading)
{
  //future dev work
  int WetVal = 310;
  int DryVal = 760;
  int P = map(SensorReading, DryVal, WetVal, 0, 100);
  return P;
}


/*
  Since SoilMoisture1 is READ_WRITE variable, onSoilMoisture1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoisture1Change()  {
  // Add your code here to act upon SoilMoisture1 change
}

/*
  Since SoilMoisture0 is READ_WRITE variable, onSoilMoisture0Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoisture0Change()  {
  // Add your code here to act upon SoilMoisture0 change
}



/*
  Since SoilMoisture2 is READ_WRITE variable, onSoilMoisture2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoisture2Change()  {
  // Add your code here to act upon SoilMoisture2 change
}

/*
  Since SoilMoisture3 is READ_WRITE variable, onSoilMoisture3Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoisture3Change()  {
  // Add your code here to act upon SoilMoisture3 change
}



/*
  Since Pump0 is READ_WRITE variable, onPump0Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPump0Change()  {
  // Add your code here to act upon Pump0 change
  //digitalWrite(PumpPort0, HIGH);
  //delay(20000);
  //digitalWrite(PumpPort0, LOW);
}

/*
  Since Pump1 is READ_WRITE variable, onPump1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPump1Change()  {
  // Add your code here to act upon Pump1 change
  //digitalWrite(PumpPort1, HIGH);
  //delay(20000);
  //digitalWrite(PumpPort1, LOW);
}

/*
  Since Pump2 is READ_WRITE variable, onPump2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPump2Change()  {
  // Add your code here to act upon Pump2 change
  //digitalWrite(PumpPort2, HIGH);
  //delay(20000);
  //digitalWrite(PumpPort2, LOW);
}

/*
  Since Pump3 is READ_WRITE variable, onPump3Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPump3Change()  {
  // Add your code here to act upon Pump3 change
  //digitalWrite(PumpPort3, HIGH);
  //delay(20000);
  //digitalWrite(PumpPort3, LOW);
}
// DS18B20Events - Version: Latest

// DS18B20 - Version: Latest


// SimpleDHT - Version: Latest


// DHT sensor library for ESPx - Version: Latest

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/37045112-260b-4672-a83e-2d23a1992818

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float light;
  float soilMoisture0;
  float soilMoisture1;
  float soilMoisture2;
  float soilMoisture3;
  CloudTemperatureSensor relitiveTemp;
  CloudTemperatureSensor soilTempF;
  CloudTemperature temp;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
//Load librarys
#include <DS18B20.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include "thingProperties.h";

//Define Global Vars
#define DHTTYPE DHT11
#define DHTPIN 0
#define LEDConfirmWifi 4
#define ActivityLED 5
#define PumpPort0 3
//#define PumpPort1 2
#define PumpPort2 1
#define PumpPort3 7
#define DS18B20_PIN 2

//Set DHT and DS18B20 pins and configs
DHT dht(DHTPIN, DHTTYPE);
DS18B20 ds(2);


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  //initialize dht
  dht.begin();
  // Initialize the DS18B20 sensor
  //ds.begin();
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  //Set Pin Modes
  pinMode(LEDConfirmWifi, OUTPUT);
  pinMode(ActivityLED, OUTPUT);
  pinMode(DS18B20_PIN, INPUT);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();

  //turn on activity indicator LED
  digitalWrite(ActivityLED, HIGH);

  //Check if connected
  //if connected turn on connectivity indicator LED
  //otherwise turn off connectivity indicator LED
  if (WiFi.status() == WL_CONNECTED)
  {
    digitalWrite(LEDConfirmWifi, HIGH);
  }
  else
  {
    digitalWrite(LEDConfirmWifi, LOW);
  }

  //Get Soil Temp data
  while (ds.selectNext()) {
    soilTempF = ds.getTempF();
  }

  //Get Light level data
  light = analogRead(A6);

  //Get Soil Data
  soilMoisture0 = SoilSaturationP(analogRead(A0));
  soilMoisture1 = SoilSaturationP(analogRead(A1));
  soilMoisture2 = SoilSaturationP(analogRead(A2));
  soilMoisture3 = SoilSaturationP(analogRead(A3));

  //if (soilMoisture0 < 40)
  //  {
  //    onPump0Change();
  //  }
  //  if (soilMoisture1 < 40)
  //  {
  //    onPump1Change();
  //  }
  //  if (soilMoisture2 < 40)
  //  {
  //    onPump2Change();
  //  }
  //  if (soilMoisture3 < 40)
  //  {
  //    onPump3Change();
  //  }

  //Get Air temp and humidity
  humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  // Check if any reads failed and exit early (to try again).
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    //return;
  }

  //Calculate Temp
  temp = (temperature * 9 / 5) + 32;
  float t = temp;
  float h = humidity;
  relitiveTemp = dht.computeHeatIndex(t, h, true);

  //Output to Serial for troubleshooting
  Serial.print("Soil Temp: ");
  Serial.print(soilTempF);
  Serial.println(" %\t");
  Serial.print("Plant Moisture 0: ");
  Serial.print(soilMoisture0);
  Serial.println(" %\t");
  Serial.print("Plant Moisture 1: ");
  Serial.print(soilMoisture1);
  Serial.println(" %\t");
  Serial.print("Plant Moisture 2: ");
  Serial.print(soilMoisture2);
  Serial.println(" %\t");
  Serial.print("Plant Moisture 3: ");
  Serial.print(soilMoisture3);
  Serial.println(" %\t");
  Serial.print("Light Level: ");
  Serial.print(light);
  Serial.println(" \t");
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println(" %\t");
  Serial.print("Temperature: ");
  Serial.print(temp);
  Serial.print(" *F");
  Serial.println(" %\t");
  Serial.print("Heat Index: ");
  Serial.print(relitiveTemp);
  Serial.println(" *F");
  Serial.println("*******************");
  digitalWrite(ActivityLED, LOW);

  //Delay in place to allow for predictable cadence of data delivery
  delay(10000);
}



/*
  Since Temp is READ_WRITE variable, onTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempChange()  {
  // Add your code here to act upon Temp change
}


/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}

/*
  Since Light is READ_WRITE variable, onLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLightChange()  {
  // Add your code here to act upon Light change
}

float SoilSaturationP(int SensorReading)
{
  //future dev work
  int WetVal = 310;
  int DryVal = 760;
  int P = map(SensorReading, DryVal, WetVal, 0, 100);
  return P;
}


/*
  Since SoilMoisture1 is READ_WRITE variable, onSoilMoisture1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoisture1Change()  {
  // Add your code here to act upon SoilMoisture1 change
}

/*
  Since SoilMoisture0 is READ_WRITE variable, onSoilMoisture0Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoisture0Change()  {
  // Add your code here to act upon SoilMoisture0 change
}



/*
  Since SoilMoisture2 is READ_WRITE variable, onSoilMoisture2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoisture2Change()  {
  // Add your code here to act upon SoilMoisture2 change
}

/*
  Since SoilMoisture3 is READ_WRITE variable, onSoilMoisture3Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoisture3Change()  {
  // Add your code here to act upon SoilMoisture3 change
}



/*
  Since Pump0 is READ_WRITE variable, onPump0Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPump0Change()  {
  // Add your code here to act upon Pump0 change
  //digitalWrite(PumpPort0, HIGH);
  //delay(20000);
  //digitalWrite(PumpPort0, LOW);
}

/*
  Since Pump1 is READ_WRITE variable, onPump1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPump1Change()  {
  // Add your code here to act upon Pump1 change
  //digitalWrite(PumpPort1, HIGH);
  //delay(20000);
  //digitalWrite(PumpPort1, LOW);
}

/*
  Since Pump2 is READ_WRITE variable, onPump2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPump2Change()  {
  // Add your code here to act upon Pump2 change
  //digitalWrite(PumpPort2, HIGH);
  //delay(20000);
  //digitalWrite(PumpPort2, LOW);
}

/*
  Since Pump3 is READ_WRITE variable, onPump3Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPump3Change()  {
  // Add your code here to act upon Pump3 change
  //digitalWrite(PumpPort3, HIGH);
  //delay(20000);
  //digitalWrite(PumpPort3, LOW);
}
